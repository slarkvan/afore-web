// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(ADMIN)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  parentId    String?
  sortOrder   Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id              String    @id @default(cuid())
  name            String
  slug            String    @unique
  description     String
  price           Decimal   @db.Decimal(10, 2)
  specifications  String?   // JSON string
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  sortOrder       Int       @default(0)
  isActive        Boolean   @default(true)
  categoryId      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  category Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images   ProductImage[]

  @@map("products")
}

model ProductImage {
  id           String  @id @default(cuid())
  productId    String
  filename     String
  originalName String
  path         String
  size         Int
  mimeType     String
  isMain       Boolean @default(false)
  sortOrder    Int     @default(0)
  createdAt    DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Page {
  id              String   @id @default(cuid())
  title           String
  slug            String   @unique
  content         String   // Rich text content
  metaTitle       String?
  metaDescription String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("pages")
}